COMPILER=G++
FLAGS=-Wall -pedantic -ansi

LEXER_SOURCE=lexer.cpp
LEXER_HEADER=lexer.h
LEXER_OBJECT=lexer.o

PARSER_SOURCE=parser.cpp
PARSER_HEADER=parser.h
PARSER_OBJECT=parser.o

MAIN_SOURCE=main.cpp
TOKENIZER_SOURCE=tokenizer.cpp
PARSER_TEST_SOURCE=test_parser.cpp

SOURCES=$(LEXER_SOURCE) $(PARSER_SOURCE) $(MAIN_SOURCE)
HEADERS=$(LEXER_HEADER) $(PARSER_HEADER)
OBJECTS=$(LEXER_OBJECT) $(PARSER_OBJECT)

EXECUTABLE=kaleidoscope
TESTS=ktest
TOKENIZER=tokenizer
PARSER_TEST=parse_test
EXECUTABLES=$(EXECUTABLE) $(TESTS) $(TOKENIZER) $(PARSER_TEST)

TESTFILE=fibo.k
TESTOUT=test.out
TESTFIXTURE=test.fix

COMPILE_OBJECTS=$(COMPILER) $(FLAGS)

all: go

$(LEXER_OBJECT): $(LEXER_SOURCE) $(LEXER_HEADER)
	$(COMPILER) -c $(FLAGS) $(LEXER_SOURCE) -o $(LEXER_OBJECT)

$(PARSER_OBJECT): $(PARSER_SOURCE) $(PARSER_HEADER)
	$(COMPILER) -c $(FLAGS) $(PARSER_SOURCE) -o $(PARSER_OBJECT)

compileall: $(OBJECTS) $(HEADERS) $(MAIN_SOURCE)
	$(COMPILE_OBJECTS) $(OBJECTS) $(MAIN_SOURCE) -o $(EXECUTABLE)

go: compileall
	./$(EXECUTABLE)

tokenizer: $(LEXER_OBJECT) $(LEXER_HEADER) $(TOKENIZER_SOURCE)
	$(COMPILE_OBJECTS) $(LEXER_OBJECT) $(TOKENIZER_SOURCE) -o $(TOKENIZER)

test: clean tokenizer_test parser_test

tokenizer_test: tokenizer $(OBJECTS) $(TESTFIXTURE)
	cat $(TESTFILE) | ./$(TOKENIZER) > $(TESTOUT)
	diff $(TESTOUT) $(TESTFIXTURE)

parser_test: $(PARSER_OBJECT) $(PARSER_HEADER) $(PARSER_TEST_SOURCE)
	$(COMPILE_OBJECTS) $(PARSER_OBJECT) $(PARSER_TEST_SOURCE) -o $(PARSER_TEST)
	./$(PARSER_TEST)

clean :
	rm -rf $(EXECUTABLES) $(OBJECTS) $(TESTOUT)
